plage_output_df <- data.frame(plage_es)
head(plage_output_df)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
CF_samples
non_CF_samples
non_CF_samples <- sample_labels %>%
filter(Type=="non_CF") %>%
pull(CF_sample_id)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
plage_adjusted_p_values <- p.adjust(plage_t_test_p_values,
method = "fdr")
?gsva
pheatmap(plage_output_df)
gsva_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="gsva",
kcdf="Poisson")
gsva_output_df <- data.frame(gsva_es)
# Perform t-tests for each gene
gsva_t_test_p_values <- apply(X = gsva_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
gsva_adjusted_p_values <- p.adjust(gsva_t_test_p_values,
method = "fdr")
pheatmap(gsva_output_df)
ssgsea_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="ssgsea")
ssgsea_output_df <- data.frame(ssgsea_es)
# Perform t-tests for each gene
ssgsea_t_test_p_values <- apply(X = ssgsea_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
ssgsea_adjusted_p_values <- p.adjust(ssgsea_t_test_p_values,
method = "fdr")
pheatmap(ssgsea_output_df)
plage_adjusted_p_values
which(plage_adjusted_p_values < 0.05)
plage_adjusted_p_values < 0.05
names(plage_adjusted_p_values < 0.05)
length(plage_adjusted_p_values < 0.05)
names(gsva_adjusted_p_values < 0.05)
length(gsva_adjusted_p_values < 0.05)
gsva_adjusted_p_values
gsva_adjusted_p_values < 0.05
names(gsva_adjusted_p_values[gsva_adjusted_p_values < 0.05])
table(gsva_adjusted_p_values < 0.05)
names(plage_adjusted_p_values[plage_adjusted_p_values < 0.05])
names(ssgsea_adjusted_p_values[ssgsea_adjusted_p_values < 0.05])
length(ssgsea_adjusted_p_values < 0.05)
table(ssgsea_adjusted_p_values < 0.05)
?gsva
zscore_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="zscore")
zscore_output_df <- data.frame(zscore_es)
# Perform t-tests for each gene
zscore_t_test_p_values <- apply(X = zscore_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
zscore_adjusted_p_values <- p.adjust(zscore_t_test_p_values,
method = "fdr")
names(zscore_adjusted_p_values[zscore_adjusted_p_values < 0.05])
table(zscore_adjusted_p_values < 0.05)
pheatmap(zscore_output_df)
rROMA_output_df <- read.table(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/Reviews/rROMA_output_SampleMatrix_2023_09_19.csv",
sep = "\t")
View(rROMA_output_df)
sapply(colnames(rROMA_output_df), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
colnames(rROMA_output_df) <- sapply(colnames(rROMA_output_df), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
pheatmap(rROMA_output_df)
table(zscore_adjusted_p_values < 0.05)
table(ssgsea_adjusted_p_values < 0.05)
boxplot(expr.matrix)
gene.pca <- prcomp(expr.matrix,
center = T)
install.packages("ggfortify")
library(ggfortify)
iris.pca.plot <- autoplot(gene.pca,
data = expr.matrix)
gene.pca.plot <- autoplot(gene.pca,
data = expr.matrix)
gene.pca.plot
gene.pca <- prcomp(t(expr.matrix),
center = T)
gene.pca.plot <- autoplot(gene.pca,
data = expr.matrix)
gene.pca.plot <- autoplot(gene.pca,
data = t(expr.matrix))
gene.pca.plot
?autoplot
gene.pca.plot <- autoplot(gene.pca,
data = t(expr.matrix),
label = T)
gene.pca.plot
dim(expr.matrix)
.libPAths()
.libPaths()
View(sample_labels)
load(file="/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/Reviews/Rehman_exp_RNA_matrix_norm.Rda")
load(file ="/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/Reviews/Rehman_exp_sample_labels.Rda")
View(Rehman_exp_coldata)
head(Rehman_exp_coldata)
table(Rehman_exp_coldata$Treatment)
control_samples <- Rehman_exp_coldata %>%
filter(Treatment=="control") %>%
pull(Simple_id)
inf_samples <- sample_labels %>%
filter(Treatment=="IL-17+TNFa") %>%
pull(Simple_id)
control_samples
inf_samples <- Rehman_exp_coldata %>%
filter(Treatment=="IL-17+TNFa") %>%
pull(Simple_id)
inf_samples
class(Rehman_exp_RNA_matrix_norm)
colnames(Rehman_exp_RNA_matrix_norm)
plage_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="plage")
plage_output_df <- data.frame(plage_es)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
pheatmap(plage_output_df)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(t_test_result$p.value)
})
colnames(plage_output_df)
inf_samples
gsub(x = inf_samples,
pattern = "[-|+]",
replacement = ".")
inf_samples <- gsub(x = inf_samples,
pattern = "[-|+]",
replacement = ".")
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(t_test_result$p.value)
})
plage_adjusted_p_values <- p.adjust(plage_t_test_p_values,
method = "fdr")
names(plage_adjusted_p_values[plage_adjusted_p_values < 0.05])
plage_adjusted_p_values
length(plage_adjusted_p_values < 0.05)
gsva_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="gsva",
kcdf="Poisson")
gsva_output_df <- data.frame(gsva_es)
pheatmap(gsva_output_df)
# Perform t-tests for each gene
gsva_t_test_p_values <- apply(X = gsva_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(t_test_result$p.value)
})
gsva_adjusted_p_values <- p.adjust(gsva_t_test_p_values,
method = "fdr")
names(gsva_adjusted_p_values[gsva_adjusted_p_values < 0.05])
gsva_adjusted_p_values
gsva_adjusted_p_values[order(gsva_adjusted_p_values, decreasing = F)]
plage_adjusted_p_values[order(plage_adjusted_p_values, decreasing = F)]
ssgsea_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="ssgsea")
ssgsea_output_df <- data.frame(ssgsea_es)
pheatmap(ssgsea_output_df)
# Perform t-tests for each gene
ssgsea_t_test_p_values <- apply(X = ssgsea_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(t_test_result$p.value)
})
ssgsea_adjusted_p_values <- p.adjust(ssgsea_t_test_p_values,
method = "fdr")
names(ssgsea_adjusted_p_values[ssgsea_adjusted_p_values < 0.05])
ssgsea_adjusted_p_values[order(ssgsea_adjusted_p_values, decreasing = F)]
zscore_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="zscore")
zscore_output_df <- data.frame(zscore_es)
pheatmap(zscore_output_df)
# Perform t-tests for each gene
zscore_t_test_p_values <- apply(X = zscore_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[control_samples],
x[inf_samples])
return(t_test_result$p.value)
})
zscore_adjusted_p_values <- p.adjust(zscore_t_test_p_values,
method = "fdr")
names(zscore_adjusted_p_values[zscore_adjusted_p_values < 0.05])
table(zscore_adjusted_p_values < 0.05)
zscore_adjusted_p_values[order(zscore_adjusted_p_values, decreasing = F)]
.libPaths()
.libPaths()
pheatmap(plage_output_df)
plage_adjusted_p_values[order(plage_adjusted_p_values, decreasing = F)]
length(plage_adjusted_p_values < 0.05)
names(plage_adjusted_p_values[plage_adjusted_p_values < 0.05])
names(gsva_adjusted_p_values[gsva_adjusted_p_values < 0.05])
pheatmap(gsva_output_df)
.libPaths()
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/rRoma_obj_breast_cptac.Rdata")
pheatmap::pheatmap(rRoma.prot$ModuleMatrix)
pheatmap::pheatmap(rRoma.prot$SampleMatrix)
source("~/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_gsva.R")
.libPaths()
library(rRoma)
summary(MatData)
summary(sample_labels)
AllHall <- SelectFromMSIGdb("HALLMARK")
AllHall <- lapply(AllHall, function(x){
x$Name <- sub("HALLMARK_", "", x$Name)
x
})
AllHall
.libPaths()
?install.packages
version
library(rRoma)
summary(MatData)
View(MatData)
dim(MatData)
MatData <- MatData[!rownames(MatData)== "", ]
sample_labels
AllHall <- SelectFromMSIGdb("HALLMARK")
AllHall
lapply(AllHall, function(x) print(x['Name']))
AllHall <- lapply(AllHall, function(x){
x$Name <- sub("HALLMARK_", "", x$Name)
x
})
lapply(AllHall, function(x) print(x['Name']))
?rROMA.R
?rROMA.R()
set.seed(123)
rRoma.output <- rRoma.R(MatData, AllHall)
load(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata)
load(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata")
View(rRoma.output)
load("./Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_com/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_com/data/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
View(Rehman_exp_RNA_matrix_norm)
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_sample_labels.Rda")
View(Rehman_exp_coldata)
View(rRoma.output$ModuleMatrix)
View(rRoma.output$ModuleMatrix)
shifted.modules <- which(rRoma.output$ModuleMatrix[, "ppv Median Exp"] <= 0.05)
shifted.modules
length(shifted.modules)
devtools::install_github("sysbio-curie/rRoma@main")
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
detach("package:rRoma", unload = TRUE)
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
detach("package:rRoma", unload = TRUE)
devtools::install_github("sysbio-curie/rRoma@fix_bug")
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
library(OmnipathR)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(reshape2)
library(tidyr)
library(dplyr)
library(cluster)
source("/Users/matthieu/ownCloud/Thèse/Systems Biology/Transcriptomic studies/fgsea_comparison/fgsea_comparison_scripts/fgsea_output_preprocess.R")
fgsea_lists <- lapply(fgsea_results_list,
function(fgsea_df) {return(fgsea_diff_activated(fgsea_df, padj_threshold = 0.25))})
fgsea_nes_combined_df <- data.frame()
for (i_study in seq_along(fgsea_lists)){
# print(i_study)
fgsea_df <- fgsea_lists[[i_study]]
cols_to_combine <- fgsea_df[,c("pathway",
# "padj",
"NES")]
colnames(cols_to_combine) <- c("pathway",
# paste("NES",
studies_names[[i_study]])
# sep = "."))
if (i_study==1){
fgsea_nes_combined_df <- cols_to_combine
} else {
fgsea_nes_combined_df <- merge(fgsea_nes_combined_df,
cols_to_combine,
by ="pathway",
all = TRUE)
}
}
fgsea_nes_combined_df <- data.frame(fgsea_nes_combined_df)
rownames(fgsea_nes_combined_df) <- fgsea_nes_combined_df$pathway
fgsea_nes_combined_df$pathway <- NULL
fgsea_nes_combined_matrix <- t(apply( fgsea_nes_combined_df, 2, as.numeric))
colnames(fgsea_nes_combined_matrix) <- rownames(fgsea_nes_combined_df)
# distfunc <- function(x) daisy(x, metric = "euclidean")
# check for instances present in only 2 datasets
# test <- apply(fgsea_nes_combined_matrix, 2, function(v) length(table(v)) == 2)
# d <- distfunc(fgsea_nes_combined_matrix)
#
# clust <- pheatmap(as.matrix(d),
#          show_rownames = T)
# #
# studies_order <- gsub(x = studies_names[clust$tree_col$order],
#                       pattern = "[ |-]",
#                       replacement = ".")
fgsea_nb_diff_pathways_per_study <- data.frame()
for (i_study in 1:length(fgsea_lists)){
fgsea_app_output <- fgsea_lists[[i_study]]
fgsea_nb_diff_pathways_per_study <- rbind(fgsea_nb_diff_pathways_per_study,
data.frame(study = names(fgsea_lists)[i_study],
nb_pathways = nrow(fgsea_app_output),
UP = nrow(fgsea_app_output[which(fgsea_app_output$diff_activated=="UP"),]),
DOWN = nrow(fgsea_app_output[which(fgsea_app_output$diff_activated=="DOWN"),])))
}
fgsea_nb_diff_pathways_per_study_long <- melt(fgsea_nb_diff_pathways_per_study,
id.vars = c("study"),
variable.name = "shift",
value.name = "nb")
fgsea_nb_diff_pathways_per_study_long <- fgsea_nb_diff_pathways_per_study %>%
pivot_longer(cols = c("UP","DOWN"),
names_to = "shift",
values_to = "nb")
# id.vars = c("study"),
# variable.name = "shift",
# value.name = "nb")
fgsea_nb_diff_pathways_per_study_long$study <- factor(fgsea_nb_diff_pathways_per_study_long$study,
levels = studies_names)
nb_diff_pathways_barplot <- ggplot(fgsea_nb_diff_pathways_per_study_long, aes(x=study, y=nb, fill=shift))+
geom_bar(stat = "identity", position = position_dodge())+
scale_fill_manual(values = c(brewer.pal(3,"Greys")[2],
brewer.pal(11,"RdYlGn")[c(10,2)]))
source("/Users/matthieu/ownCloud/Thèse/Systems Biology/Transcriptomic studies/fgsea_comparison/fgsea_comparison_scripts/fgsea_comparison_utils.R")
names(fgsea_lists) <- gsub(pattern = "-| ",replacement = ".", names(fgsea_lists))
fgsea_es_diff_pathways <- fgsea_nes_diff_pathways_in_common(fgsea_lists = fgsea_lists,
fgsea_combined_df = fgsea_nes_combined_df,
# studies_order = studies_order,
nb_in_common = 3)
diff_intersections_summary <- fgsea_diff_pathways_in_common(fgsea_lists = fgsea_lists,
# studies_order = studies_order,
nb_in_common = 3)
# mask <- sapply(diff_intersections_summary, as.logical)
# fgsea_es_diff_pathways[!mask] <- NA
# save(fgsea_es_diff_pathways,
#      file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/Transcriptomic studies/fgsea_comparison/fgsea_nes_diff_pathways_2022_09_15.RData")
View(fgsea_es_diff_pathways)
View(fgsea_es_diff_pathways)
diff_intersections_summary <- fgsea_diff_pathways_in_common(fgsea_lists = fgsea_lists,
# studies_order = studies_order,
nb_in_common = 3)
View(diff_intersections_summary)
fgsea_lists
View(fgsea_lists$Saint.Criq.UNC)
# load("~/ownCloud/Thèse/Systems Biology/Transcriptomic studies/Transcriptomic Analyses/Analyse Saint-Criq/GSEA/Saint_Criq_UNC_without_NCF_2_fgsea_report_2021_01_27.RData"
load("~/ownCloud/Thèse/Systems Biology/Transcriptomic studies/Transcriptomic Analyses/Analyse Saint-Criq/GSEA/Saint_Criq_UNC_without_NCF_2_fgsea_report_kegg_pathways_2022_09_07.RData")
# load("~/ownCloud/Thèse/Systems Biology/Transcriptomic studies/Transcriptomic Analyses/Analyse Saint-Criq/GSEA/Saint_Criq_UNC_without_NCF_2_fgsea_report_2021_01_27.RData"
load("~/ownCloud/Thèse/Systems Biology/Transcriptomic studies/Transcriptomic Analyses/Analyse Saint-Criq/GSEA/Saint_Criq_UNC_without_NCF_2_fgsea_report_kegg_pathways_2022_09_07.RData")
Saint_Criq_UNC_fgsea <- fgseaRes
Saint_Criq_UNC_fgsea <- Saint_Criq_UNC_fgsea[which(Saint_Criq_UNC_fgsea$pathway %in% remove_REACTOME(Saint_Criq_UNC_fgsea$pathway)),]
View(Saint_Criq_UNC_fgsea)
.libPaths()
getwd()
setwd("/Users/matthieu/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork/")
# for PPI_network class
source("scripts/pathways_to_network/network_utils.R")
# for endpoint_tag(),
# gene_symbol_sanity_check(),
# tag_weird_endpoints(),
# remove_weird_endpoints(),
# remove_expression_interactions(),
# remove_indirect_interactions(),
# remove_same_interactions(),
# binding_interaction()
source("scripts/kegg_diff_pathways_network_scripts/simplify_network_helper.R")
# for endpoint_tag(),
# gene_symbol_sanity_check(),
# tag_weird_endpoints(),
# remove_weird_endpoints(),
# remove_expression_interactions(),
# remove_indirect_interactions(),
# remove_same_interactions(),
# binding_interaction()
source("scripts/kegg_diff_pathways_network_scripts/simplify_network_helper.R")
# for endpoint_tag(),
# gene_symbol_sanity_check(),
# tag_weird_endpoints(),
# remove_weird_endpoints(),
# remove_expression_interactions(),
# remove_indirect_interactions(),
# remove_same_interactions(),
# binding_interaction()
source("scripts/kegg_diff_pathways_network_scripts/simplify_network_helper.R")
# for get_node_type(),
source("scripts/kegg_diff_pathways_network_scripts/network_visualization_helper.R")
# KEGG DIFF PATHWAYS - All proteins
load("kegg_diff_pathways_network/kegg_diff_pathways_interactions_with_CFTR_interactors_df.RData")
load("kegg_diff_pathways_network/kegg_diff_pathways_nodes_with_CFTR_interactors_df.RData")
CF_PPI_network.CFTR_extended <- new("PPI_network",
interactions=CF_PPI_network.CFTR_extended.interactions,
nodes=CF_PPI_network.CFTR_extended.nodes)
# Tag Endpoints: TF and Caspases (Apoptosis)
CF_PPI_network.CFTR_extended.endpoint_tag <-
dorothea_tag(CF_PPI_network.CFTR_extended)
# Remove expression interactions (dorothea and kegg)
CF_PPI_network.without_expression <-
remove_expression_interactions(CF_PPI_network.CFTR_extended.endpoint_tag)
CF_PPI_network.direct <-
remove_indirect_interactions(CF_PPI_network.without_expression)
# # Tag receptors and receptor ligands
CF_PPI_network.direct.rep_tag <- tag_prot_cat(CF_PPI_network.direct)
CF_PPI_network.direct.node_type <- get_node_type(CF_PPI_network.direct.rep_tag,
# interactors = CFTR_interactors,
include_weird_endpoints = FALSE)
CF_PPI_network.curated <- remove_same_interactions(CF_PPI_network.direct)
# Tag receptors and receptor ligands
CF_PPI_network.curated.rep_tag <- tag_prot_cat(CF_PPI_network.curated)
# Remove non receptor that don't have downstream interactions
# CF_PPI_network.lcc.curated.tagged <- tag_non_source_receptors_interactions(CF_PPI_network.lcc.curated)
CF_PPI_network.curated.2 <- remove_non_source_receptors(CF_PPI_network.curated.rep_tag)
CF_PPI_network.curated.2.node_type <- get_node_type(CF_PPI_network.curated.2,
# interactors = CFTR_interactors,
include_weird_endpoints = FALSE)
dim(CF_PPI_network.curated.2.node_type@interactions)
dim(CF_PPI_network.curated.2.node_type@nodes)
source("scripts/pathways_to_network/network_utils.R")
CF_PPI_network.lcc.node_type.interactions <-
read.table(file = "kegg_diff_pathways_network/diff_kegg_pathways_with_CFTR_interactors_PPI_direct_tagged_interactions_df.txt",
sep = "\t",
header = T,
check.names = F)
CF_PPI_network.lcc.node_type.nodes <-
read.table(file = "kegg_diff_pathways_network/diff_kegg_pathways_with_CFTR_interactors_PPI_direct_tagged_nodes_df.txt",
sep = "\t",
header = T,
check.names = F)
CF_PPI_network.lcc.node_type <- new("PPI_network",
interactions=CF_PPI_network.lcc.node_type.interactions,
nodes=CF_PPI_network.lcc.node_type.nodes)
# Remove CFTR from the network
CF_PPI_network.lcc.node_type@interactions <- CF_PPI_network.lcc.node_type@interactions[which(CF_PPI_network.lcc.node_type@interactions$genesymbol_source!="CFTR" &
CF_PPI_network.lcc.node_type@interactions$genesymbol_target!="CFTR"),]
CF_PPI_network.lcc.node_type@nodes <- CF_PPI_network.lcc.node_type@nodes[which(CF_PPI_network.lcc.node_type@nodes$Symbol!="CFTR"),]
dim(CF_PPI_network.lcc.node_type@nodes)
dim(CF_PPI_network.lcc.node_type@interactions)
