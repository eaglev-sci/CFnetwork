method = "fdr")
table(gsva_adjusted_p_values < 0.05)
.libPaths()
pheatmap(gsva_output_df)
lapply(genesets_list, length)
table(lapply(genesets_list, length))
genesets_list
genesets_list$HALLMARK_CHOLESTEROL_HOMEOSTASIS
pheatmap(plage_output_df)
.libPaths()
.libPaths()
pheatmap(expr.matrix)
CF_samples
sample_labels
head(expr.matrix)
1:6
rep(1:6, 2)
paste(sample_labels$sample_id,
rep(1:6, 2),
sep = "_")
samples_labels$CF_sample_id <- paste(sample_labels$sample_id,
rep(1:6, 2),
sep = "_")
sample_labels$CF_sample_id <- paste(sample_labels$sample_id,
rep(1:6, 2),
sep = "_")
rownames(expr.matrix)
colnames(expr.matrix)
sapply(colnames(expr.matrix), function(id){
CF_id <- sample_lables %<%
filter(sample_id==id) %<%
pull(CF_sample_id)
return(CF_id)
})
sapply(colnames(expr.matrix), function(id){
CF_id <- sample_lables %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
sapply(colnames(expr.matrix), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
sample_labels$CF_sample_id <- paste(sample_labels$Type,
rep(1:6, 2),
sep = "_")
sapply(colnames(expr.matrix), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
colnames(expr.matrix) <- sapply(colnames(expr.matrix), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
sample_labels$CF_sample_id <- paste(sample_labels$Type,
rep(1:6, 2),
sep = "_")
colnames(expr.matrix) <- sapply(colnames(expr.matrix), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
colnames(expr.matrix)
sample_labels
expr.matrix <- as.matrix(MatData)
colnames(expr.matrix) <- sapply(colnames(expr.matrix), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
colnames(expr.matrix)
expr.matrix
head(expr.matrix)
pheatmap(expr.matrix)
plage_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="plage")
plage_output_df <- data.frame(plage_es)
head(plage_output_df)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
CF_samples
CF_samples <- sample_labels %>%
filter(Type=="CF") %>%
pull(CF_sample_id)
non_CF_samples <- sample_labels %>%
filter(Type=="non-CF") %>%
pull(CF_sample_id)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
CF_samples
non_CF_samples
head(plage_output_df)
?gsub
sample_labels$Type <- gsub(x = sample_labels$Type,
pattern = "-",
replacement = "_")
sample_labels$CF_sample_id <- paste(sample_labels$Type,
rep(1:6, 2),
sep = "_")
sample_labels
CF_samples <- sample_labels %>%
filter(Type=="CF") %>%
pull(CF_sample_id)
non_CF_samples <- sample_labels %>%
filter(Type=="non-CF") %>%
pull(CF_sample_id)
expr.matrix <- as.matrix(MatData)
colnames(expr.matrix) <- sapply(colnames(expr.matrix), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
head(expr.matrix)
plage_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="plage")
plage_output_df <- data.frame(plage_es)
head(plage_output_df)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
CF_samples
non_CF_samples
non_CF_samples <- sample_labels %>%
filter(Type=="non_CF") %>%
pull(CF_sample_id)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
plage_adjusted_p_values <- p.adjust(plage_t_test_p_values,
method = "fdr")
?gsva
pheatmap(plage_output_df)
gsva_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="gsva",
kcdf="Poisson")
gsva_output_df <- data.frame(gsva_es)
# Perform t-tests for each gene
gsva_t_test_p_values <- apply(X = gsva_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
gsva_adjusted_p_values <- p.adjust(gsva_t_test_p_values,
method = "fdr")
pheatmap(gsva_output_df)
ssgsea_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="ssgsea")
ssgsea_output_df <- data.frame(ssgsea_es)
# Perform t-tests for each gene
ssgsea_t_test_p_values <- apply(X = ssgsea_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
ssgsea_adjusted_p_values <- p.adjust(ssgsea_t_test_p_values,
method = "fdr")
pheatmap(ssgsea_output_df)
plage_adjusted_p_values
which(plage_adjusted_p_values < 0.05)
plage_adjusted_p_values < 0.05
names(plage_adjusted_p_values < 0.05)
length(plage_adjusted_p_values < 0.05)
names(gsva_adjusted_p_values < 0.05)
length(gsva_adjusted_p_values < 0.05)
gsva_adjusted_p_values
gsva_adjusted_p_values < 0.05
names(gsva_adjusted_p_values[gsva_adjusted_p_values < 0.05])
table(gsva_adjusted_p_values < 0.05)
names(plage_adjusted_p_values[plage_adjusted_p_values < 0.05])
names(ssgsea_adjusted_p_values[ssgsea_adjusted_p_values < 0.05])
length(ssgsea_adjusted_p_values < 0.05)
table(ssgsea_adjusted_p_values < 0.05)
?gsva
zscore_es <- gsva(expr.matrix,
genesets_list,
verbose=FALSE,
method="zscore")
zscore_output_df <- data.frame(zscore_es)
# Perform t-tests for each gene
zscore_t_test_p_values <- apply(X = zscore_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
zscore_adjusted_p_values <- p.adjust(zscore_t_test_p_values,
method = "fdr")
names(zscore_adjusted_p_values[zscore_adjusted_p_values < 0.05])
table(zscore_adjusted_p_values < 0.05)
pheatmap(zscore_output_df)
rROMA_output_df <- read.table(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/Reviews/rROMA_output_SampleMatrix_2023_09_19.csv",
sep = "\t")
View(rROMA_output_df)
sapply(colnames(rROMA_output_df), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
colnames(rROMA_output_df) <- sapply(colnames(rROMA_output_df), function(id){
CF_id <- sample_labels %>%
filter(sample_id==id) %>%
pull(CF_sample_id)
return(CF_id)
})
pheatmap(rROMA_output_df)
table(zscore_adjusted_p_values < 0.05)
table(ssgsea_adjusted_p_values < 0.05)
boxplot(expr.matrix)
gene.pca <- prcomp(expr.matrix,
center = T)
install.packages("ggfortify")
library(ggfortify)
iris.pca.plot <- autoplot(gene.pca,
data = expr.matrix)
gene.pca.plot <- autoplot(gene.pca,
data = expr.matrix)
gene.pca.plot
gene.pca <- prcomp(t(expr.matrix),
center = T)
gene.pca.plot <- autoplot(gene.pca,
data = expr.matrix)
gene.pca.plot <- autoplot(gene.pca,
data = t(expr.matrix))
gene.pca.plot
?autoplot
gene.pca.plot <- autoplot(gene.pca,
data = t(expr.matrix),
label = T)
gene.pca.plot
dim(expr.matrix)
.libPAths()
.libPaths()
View(sample_labels)
load(file="/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/Reviews/Rehman_exp_RNA_matrix_norm.Rda")
load(file ="/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/Reviews/Rehman_exp_sample_labels.Rda")
View(Rehman_exp_coldata)
head(Rehman_exp_coldata)
table(Rehman_exp_coldata$Treatment)
control_samples <- Rehman_exp_coldata %>%
filter(Treatment=="control") %>%
pull(Simple_id)
inf_samples <- sample_labels %>%
filter(Treatment=="IL-17+TNFa") %>%
pull(Simple_id)
control_samples
inf_samples <- Rehman_exp_coldata %>%
filter(Treatment=="IL-17+TNFa") %>%
pull(Simple_id)
inf_samples
class(Rehman_exp_RNA_matrix_norm)
colnames(Rehman_exp_RNA_matrix_norm)
plage_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="plage")
plage_output_df <- data.frame(plage_es)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[CF_samples], x[non_CF_samples])
return(t_test_result$p.value)
})
pheatmap(plage_output_df)
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(t_test_result$p.value)
})
colnames(plage_output_df)
inf_samples
gsub(x = inf_samples,
pattern = "[-|+]",
replacement = ".")
inf_samples <- gsub(x = inf_samples,
pattern = "[-|+]",
replacement = ".")
# Perform t-tests for each gene
plage_t_test_p_values <- apply(X = plage_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(t_test_result$p.value)
})
plage_adjusted_p_values <- p.adjust(plage_t_test_p_values,
method = "fdr")
names(plage_adjusted_p_values[plage_adjusted_p_values < 0.05])
plage_adjusted_p_values
length(plage_adjusted_p_values < 0.05)
gsva_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="gsva",
kcdf="Poisson")
gsva_output_df <- data.frame(gsva_es)
pheatmap(gsva_output_df)
# Perform t-tests for each gene
gsva_t_test_p_values <- apply(X = gsva_output_df,
MARGIN = 1,
FUN = function(x) {
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(t_test_result$p.value)
})
gsva_adjusted_p_values <- p.adjust(gsva_t_test_p_values,
method = "fdr")
names(gsva_adjusted_p_values[gsva_adjusted_p_values < 0.05])
gsva_adjusted_p_values
gsva_adjusted_p_values[order(gsva_adjusted_p_values, decreasing = F)]
plage_adjusted_p_values[order(plage_adjusted_p_values, decreasing = F)]
ssgsea_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="ssgsea")
ssgsea_output_df <- data.frame(ssgsea_es)
pheatmap(ssgsea_output_df)
# Perform t-tests for each gene
ssgsea_t_test_p_values <- apply(X = ssgsea_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[control_samples], x[inf_samples])
return(t_test_result$p.value)
})
ssgsea_adjusted_p_values <- p.adjust(ssgsea_t_test_p_values,
method = "fdr")
names(ssgsea_adjusted_p_values[ssgsea_adjusted_p_values < 0.05])
ssgsea_adjusted_p_values[order(ssgsea_adjusted_p_values, decreasing = F)]
zscore_es <- gsva(Rehman_exp_RNA_matrix_norm,
genesets_list,
verbose=FALSE,
method="zscore")
zscore_output_df <- data.frame(zscore_es)
pheatmap(zscore_output_df)
# Perform t-tests for each gene
zscore_t_test_p_values <- apply(X = zscore_output_df,
MARGIN = 1,
FUN = function(x) {
# print(x[CF_samples])
# print(x[non_CF_samples])
t_test_result <- t.test(x[control_samples],
x[inf_samples])
return(t_test_result$p.value)
})
zscore_adjusted_p_values <- p.adjust(zscore_t_test_p_values,
method = "fdr")
names(zscore_adjusted_p_values[zscore_adjusted_p_values < 0.05])
table(zscore_adjusted_p_values < 0.05)
zscore_adjusted_p_values[order(zscore_adjusted_p_values, decreasing = F)]
.libPaths()
.libPaths()
pheatmap(plage_output_df)
plage_adjusted_p_values[order(plage_adjusted_p_values, decreasing = F)]
length(plage_adjusted_p_values < 0.05)
names(plage_adjusted_p_values[plage_adjusted_p_values < 0.05])
names(gsva_adjusted_p_values[gsva_adjusted_p_values < 0.05])
pheatmap(gsva_output_df)
.libPaths()
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/rRoma_obj_breast_cptac.Rdata")
pheatmap::pheatmap(rRoma.prot$ModuleMatrix)
pheatmap::pheatmap(rRoma.prot$SampleMatrix)
source("~/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/Rehman_TNF_IL17_gsva.R")
.libPaths()
library(rRoma)
summary(MatData)
summary(sample_labels)
AllHall <- SelectFromMSIGdb("HALLMARK")
AllHall <- lapply(AllHall, function(x){
x$Name <- sub("HALLMARK_", "", x$Name)
x
})
AllHall
.libPaths()
?install.packages
version
library(rRoma)
summary(MatData)
View(MatData)
dim(MatData)
MatData <- MatData[!rownames(MatData)== "", ]
sample_labels
AllHall <- SelectFromMSIGdb("HALLMARK")
AllHall
lapply(AllHall, function(x) print(x['Name']))
AllHall <- lapply(AllHall, function(x){
x$Name <- sub("HALLMARK_", "", x$Name)
x
})
lapply(AllHall, function(x) print(x['Name']))
?rROMA.R
?rROMA.R()
set.seed(123)
rRoma.output <- rRoma.R(MatData, AllHall)
load(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata)
load(file = "/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_rRoma_obj.Rdata")
View(rRoma.output)
load("./Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_com/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_com/data/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_RNA_exp_matrix_norm.Rda")
View(Rehman_exp_RNA_matrix_norm)
load("/Users/matthieu/ownCloud/Thèse/Systems Biology/project rROMA/rRoma_comp/data/Rehman_IL17_TNFa_sample_labels.Rda")
View(Rehman_exp_coldata)
View(rRoma.output$ModuleMatrix)
View(rRoma.output$ModuleMatrix)
shifted.modules <- which(rRoma.output$ModuleMatrix[, "ppv Median Exp"] <= 0.05)
shifted.modules
length(shifted.modules)
devtools::install_github("sysbio-curie/rRoma@main")
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
detach("package:rRoma", unload = TRUE)
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
detach("package:rRoma", unload = TRUE)
devtools::install_github("sysbio-curie/rRoma@fix_bug")
library(rRoma)
rRoma.output <- rRoma.R(MatData, AllHall)
library(OmnipathR)
getwd()
setwd("/Users/matthieu/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork/")
getwd()
Verhaeghe_DEG_HGNC <- read.table(file = "differential_expression_data/Verhaeghe_DEG_limma_unique_HGNC.txt",
sep = "\t",
header = T)
ls()
getwd()
setwd(dir = "/Users/matthieu/ownCloud/Thèse/Systems Biology/Meta-analysis article/CFnetwork/scripts/")
knitr::opts_knit$set(root.dir = "..")
Verhaeghe_DEG_HGNC <- read.table(file = "differential_expression_data/Verhaeghe_DEG_limma_unique_HGNC.txt",
sep = "\t",
header = T)
Verhaeghe_DEG_HGNC <- read.table(file = "differential_expression_data/Verhaeghe_DEG_limma_unique_HGNC.txt",
sep = "\t",
header = T)
Verhaeghe_DEG_HGNC <- read.table(file = "differential_expression_data/Verhaeghe_DEG_limma_unique_HGNC.txt",
sep = "\t",
header = T)
getwd()
knitr::opts_knit$set(root.dir = "..")
Verhaeghe_DEG_HGNC <- read.table(file = "differential_expression_data/Verhaeghe_DEG_limma_unique_HGNC.txt",
sep = "\t",
header = T)
getwd()
knitr::opts_knit$set(root.dir = "..")
getwd()
knitr::opts_knit$set(root.dir = "..")
setwd("..")
Verhaeghe_DEG_HGNC <- read.table(file = "differential_expression_data/",
sep = "\t",
header = T)
knitr::opts_knit$set(root.dir = '..')
Verhaeghe_DEG_HGNC <- read.table(file = "differential_expression_data/Verhaeghe_DEG_limma_unique_HGNC.txt",
sep = "\t",
header = T)
getwd()
knitr::opts_knit$set(root.dir = '../..')
Verhaeghe_DEG_HGNC <- read.table(file = "differential_expression_data/Verhaeghe_DEG_limma_unique_HGNC.txt",
sep = "\t",
header = T)
getwd()
knitr::opts_knit$set(root.dir = '../../')
getwd()
getwd()
